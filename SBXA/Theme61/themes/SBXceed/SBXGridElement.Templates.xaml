<!--

       Name    : DefaultControlStyles.xaml
       Author  : Kendrew Peacey
       
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
              Module  %M%     Version %I%     Date    %H%
              
-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
    xmlns:rkt="http://schemas.sbxa.com/WPFControls"
    xmlns:sbx="clr-namespace:SBXA.UI.WPFControls.SBXceed"
    xmlns:sbce="clr-namespace:SBXA.UI.WPFControls.MarkupExtensions"
    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <!-- Note: Although the NoFocusContextMenu is defined against all the
             no focus grid cell templates, on most (if not all) a right click
             just gives focus to the grid cell.
         -->
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/NoFocusContextMenu.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="SBXSBTextBoxTemplate" TargetType="{x:Type TextBoxBase}">
        <Border Name="Border"
                    CornerRadius="0"
                    Margin="0"
                    BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                    BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{TemplateBinding Background}"
                    rkt:SBUISupport.TemplateName="SBXSBTextBoxTemplate"
                    >
<!--
            Margin="-1,0,0,0"
-->
            <ScrollViewer x:Name="PART_ContentHost" 
                          Margin="0"
                          VerticalScrollBarVisibility="Disabled"
                          HorizontalScrollBarVisibility="Disabled"
                          SnapsToDevicePixels="True"
                          Foreground="{TemplateBinding Foreground}"
                          KeyboardNavigation.AcceptsReturn="{Binding Path=AcceptsReturn, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBTextBox}}}"
                          >
                <ScrollViewer.Template>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                         <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" 
                                                 CanContentScroll="{TemplateBinding CanContentScroll}" 
                                                 CanHorizontallyScroll="False" 
                                                 CanVerticallyScroll="False" 
                                                 ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                 Content="{TemplateBinding Content}" 
                                                 Margin="0" 
                                                 />
                    </ControlTemplate>

                </ScrollViewer.Template>
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="SBXSBContentTextBoxTemplate"  TargetType="{x:Type TextBoxBase}">
            <TextBlock x:Name="PART_FocusSite" 
                   Height="Auto"
                   Margin="0"
                   SnapsToDevicePixels="True"
                   Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                   TextDecorations="{Binding Path=(rkt:SBControl.TextDecorations), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                   Background="{TemplateBinding Background}"
                   Foreground="{TemplateBinding Foreground}"
                   />
    </ControlTemplate>

    <!-- ******************************************************************************************************************************* -->
    <!--                                 Footer templates for table view                                                                 -->
    <!-- ******************************************************************************************************************************* -->
    <DataTemplate x:Key="SBFixFootersTemplate" >
        <rkt:SBXStatRow rkt:SBUISupport.TemplateName="SBFixFootersTemplate"/>
    </DataTemplate>

    <!-- ******************************************************************************************************************************* -->
    <!--                                 Editor and Content templates for table view                                                     -->
    <!-- ******************************************************************************************************************************* -->

    <!-- *********************** -->
    <!-- Footer Textclass DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXTextclassFooterCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     rkt:SBGridControl.ParentColumn="{Binding Path=ParentColumn, RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type xcdg:StatCell}}, Mode=OneWay, Converter={StaticResource SBXColumnConverter}}"
                     rkt:SBControl.FieldName="{Binding Path=GuiObjectDefinition.FieldDefinition.FieldName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"
                     GuiObjectDefinition="{Binding Path=(rkt:SBGridControl.ParentColumn).ColumnDefinition.FooterGuiObjectDefinition, RelativeSource={RelativeSource  Mode=Self}, Mode=OneWay}"
                     rkt:SBGUIAttribute.SBObjectName="{rkt:SBObjectNameExtension}"
                     rkt:SBGUIAttribute.SBParentObjectName="{Binding Path=(rkt:SBGUIAttribute.SBObjectName), RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type rkt:SBMvEditControl}}, Mode=OneWay}"
                     Style="{DynamicResource SBXSBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBXTextclassFooterCellContentTemplate"
                     Margin="0,-2,0,0"
                     Width="NaN"
                     >
        </rkt:SBField>
    </DataTemplate>

    <!-- *********************** -->
    <!-- Textclass DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXTextclassCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{Binding}"
                     Style="{DynamicResource SBXSBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBXTextclassCellContentTemplate"
                     rkt:SBGridControl.IsCurrentField="False"
                     >
        </rkt:SBField>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ParentColumn.SBEmphasized, RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}, Converter={StaticResource SBConverter}, Mode=OneWay}"
                         Value="0">
                <Setter TargetName="PART_SBField"
                        Property="Background"
                        Value="Silver"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!-- 
                         SBValue="{Binding Path=Data}"    
         rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}" 
         Removed this line for the 3.6 upgrade as it appears that the IsCurrent property on DataCell is now being set much earlier that in 3.0. eCase 41134*USA (kp Feb 3, 2010)
    -->

    <!-- SBXSCTextclassCellContentTemplate -->
    <DataTemplate x:Key="SBXSCTextclassCellContentTemplate" >
        <TextBlock x:Name="PART_SBField" 
                   Style="{DynamicResource SBXSCSBTextBoxStyle}" 
                   Text="{Binding}" 
                   TextAlignment="{Binding Path=ParentColumn.ColumnDefinition.Justification, RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}, Converter={StaticResource SBTextAlignmentConverter}, Mode=OneWay}"
                   rkt:SBUISupport.TemplateName="SBXSCTextclassCellContentTemplate"
                   />
    </DataTemplate>

    <!-- SBXTextclassCellEditorTemplate -->
    <DataTemplate  x:Key="SBXTextclassCellEditorTemplate">
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{xcdg:CellEditorBinding}"
                     rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}"
                     Style="{DynamicResource SBXSBFieldStyle}"
                     rkt:SBUISupport.TemplateName="SBXTextclassCellEditorTemplate">
                    
                     <rkt:SBGUIAttribute.SBMaxChar>
                        <PriorityBinding>
                            <Binding Path="(rkt:SBXGridControl.CellData).(rkt:SBGUIAttribute.SBMaxChar)" Mode="OneWay" Converter="{StaticResource SBUnsetNegativeIntConverter}" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}"/>
                            <Binding Path="GuiObjectDefinition.MaxChars" Mode="OneWay"  RelativeSource="{RelativeSource Mode=Self}" />
                        </PriorityBinding>
                     </rkt:SBGUIAttribute.SBMaxChar>
            <rkt:SBControl.IgnoreKeys>
                <rkt:KeysToIgnoreCollection>
                    <rkt:KeyToIgnore Key="Next"/>
                </rkt:KeysToIgnoreCollection>
            </rkt:SBControl.IgnoreKeys>
        </rkt:SBField>
    </DataTemplate>

    <!-- Column and row grid field templates -->
    <DataTemplate x:Key="SBXCharTextclassCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{Binding}"
                     rkt:SBGridControl.IsCurrentField="False"
                     Style="{DynamicResource SBXCharSBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBXCharTextclassCellContentTemplate"
                     >
        </rkt:SBField>
    </DataTemplate>
    <!-- rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}" 
         Removed this line for the 3.6 upgrade as it appears that the IsCurrent property on DataCell is now being set much earlier that in 3.0. eCase 41134*USA (kp Feb 3, 2010)
    -->

    <DataTemplate  x:Key="SBXCharTextclassCellEditorTemplate">
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{xcdg:CellEditorBinding}"
                     rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}"
                     Style="{DynamicResource SBXCharSBFieldStyle}"
                     rkt:SBUISupport.TemplateName="SBXCharTextclassCellEditorTemplate"
                     >
            <rkt:SBControl.IgnoreKeys>
                <rkt:KeysToIgnoreCollection>
                    <rkt:KeyToIgnore Key="Next"/>
                </rkt:KeysToIgnoreCollection>
            </rkt:SBControl.IgnoreKeys>
        </rkt:SBField>
    </DataTemplate>

    <!-- Interleaved grid field templates -->
    <DataTemplate x:Key="SBXInterleavedTextclassCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{Binding}"
                     rkt:SBGridControl.IsCurrentField="False"
                     Style="{DynamicResource SBXISBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBXInterleavedTextclassCellContentTemplate"
                     >
        </rkt:SBField>
    </DataTemplate>
    <!-- rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}" 
         Removed this line for the 3.6 upgrade as it appears that the IsCurrent property on DataCell is now being set much earlier that in 3.0. eCase 41134*USA (kp Feb 3, 2010)
    -->

    <DataTemplate  x:Key="SBXInterleavedTextclassCellEditorTemplate">
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{xcdg:CellEditorBinding}"
                     rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}"
                     Style="{DynamicResource SBXISBFieldStyle}"
                     rkt:SBUISupport.TemplateName="SBXInterleavedTextclassCellEditorTemplate"
                     >
            <rkt:SBControl.IgnoreKeys>
                <rkt:KeysToIgnoreCollection>
                    <rkt:KeyToIgnore Key="Next"/>
                </rkt:KeysToIgnoreCollection>
            </rkt:SBControl.IgnoreKeys>
        </rkt:SBField>
    </DataTemplate>

    <!-- *********************** -->
    <!-- Toggle DataTemplates    -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXToggleCellContentTemplate" >
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource SBXSBToggleContentStyle}"
                      rkt:SBUISupport.TemplateName="SBXToggleCellContentTemplate"
                      SBValue="{Binding}"
                      rkt:SBGridControl.IsCurrentField="False"
            />
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ParentColumn.SBEmphasized, RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}, Converter={StaticResource SBConverter}, Mode=OneWay}"
                         Value="0">
                <Setter TargetName="PART_SBField"
                        Property="Background"
                        Value="Silver"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate  x:Key="SBXToggleCellEditorTemplate">
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource SBXSBToggleStyle}"
                      rkt:SBUISupport.TemplateName="SBXToggleCellEditorTemplate"
                      SBValue="{xcdg:CellEditorBinding}"
            />
    </DataTemplate>

    
    <!-- *********************** -->
    <!-- ComboBox DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXComboBoxCellContentTemplate" >
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{Binding}"
                        Style="{DynamicResource SBXSBComboBoxStyle}"
                        rkt:SBUISupport.TemplateName="SBXComboBoxCellContentTemplate"
                        rkt:SBGridControl.IsCurrentField="False"
                        />
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ParentColumn.SBEmphasized, RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}, Converter={StaticResource SBConverter}, Mode=OneWay}"
                         Value="0">
                <Setter TargetName="PART_SBField"
                        Property="Background"
                        Value="Silver"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate  x:Key="SBXComboBoxCellEditorTemplate">
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{xcdg:CellEditorBinding}"
                        Style="{DynamicResource SBXSBComboBoxStyle}"
                        rkt:SBUISupport.TemplateName="SBXComboBoxCellEditorTemplate"
                       />
    </DataTemplate>

    <!-- ******************************************************************************************************************************* -->
    <!--                                 Editor and Content templates for card view                                                      -->
    <!-- ******************************************************************************************************************************* -->

    <!-- *********************** -->
    <!-- Textclass DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXCardViewTextclassCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{Binding}"
                     Style="{DynamicResource SBXCardViewSBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBXCardViewTextclassCellContentTemplate"
                     rkt:SBGridControl.IsCurrentField="False"
                     ContextMenu="{StaticResource NoFocusContextMenu}"
                     >
            <rkt:SBControl.IgnoreKeys>
                <rkt:KeysToIgnoreCollection>
                    <rkt:KeyToIgnore />
                </rkt:KeysToIgnoreCollection>
            </rkt:SBControl.IgnoreKeys>
        </rkt:SBField>
    </DataTemplate>
    
    <!-- rkt:SBGridControl.IsCurrentField="{Binding Path=IsCurrent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type xcdg:DataCell}}}" 
         Removed this line for the 3.6 upgrade as it appears that the IsCurrent property on DataCell is now being set much earlier that in 3.0. eCase 41134*USA (kp Feb 3, 2010)
    -->

    <DataTemplate  x:Key="SBXCardViewTextclassCellEditorTemplate">
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{xcdg:CellEditorBinding}"
                     Style="{DynamicResource SBXCardViewSBFieldStyle}"
                     rkt:SBUISupport.TemplateName="SBXCardViewTextclassCellEditorTemplate"
                     >
            <rkt:SBControl.IgnoreKeys>
                <rkt:KeysToIgnoreCollection>
                    <rkt:KeyToIgnore />
                </rkt:KeysToIgnoreCollection>
            </rkt:SBControl.IgnoreKeys>
        </rkt:SBField>
    </DataTemplate>

    <!-- *********************** -->
    <!-- ComboBox DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXCardViewComboBoxCellContentTemplate" >
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{Binding}"
                        Style="{DynamicResource SBXCardViewSBComboBoxContentStyle}"
                        rkt:SBUISupport.TemplateName="SBXCardViewComboBoxCellContentTemplate"
                        rkt:SBGridControl.IsCurrentField="False"
                        />
    </DataTemplate>

    <DataTemplate  x:Key="SBXCardViewComboBoxCellEditorTemplate">
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{xcdg:CellEditorBinding}"
                        Style="{DynamicResource SBXCardViewSBComboBoxStyle}"
                        rkt:SBUISupport.TemplateName="SBXCardViewComboBoxCellEditorTemplate"
                        />
    </DataTemplate>

    <!-- *********************** -->
    <!-- Toggle DataTemplates    -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBXCardViewToggleCellContentTemplate" >
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource DefaultSBXSBToggleContentStyle}"
                      rkt:SBUISupport.TemplateName="SBXCardViewToggleCellContentTemplate"
                      SBValue="{Binding}"
                      rkt:SBGridControl.IsCurrentField="False"
            />
    </DataTemplate>

    <DataTemplate  x:Key="SBXCardViewToggleCellEditorTemplate">
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource DefaultSBXSBToggleStyle}"
                      rkt:SBUISupport.TemplateName="SBXCardViewToggleCellEditorTemplate"
                      SBValue="{xcdg:CellEditorBinding}"
            />
    </DataTemplate>


    <!-- ******************************************************************************************************************************* -->
    <!--                                 Editor and Content templates for 3D card view                                                      -->
    <!-- ******************************************************************************************************************************* -->

    <!-- *********************** -->
    <!-- Textclass DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBX3DViewTextclassCellContentTemplate" >
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{Binding}"
                     rkt:SBGridControl.IsCurrentField="False"
                     Style="{DynamicResource SBXCardViewSBFieldContentStyle}"
                     rkt:SBUISupport.TemplateName="SBX3DViewTextclassCellContentTemplate"
                     />
    </DataTemplate>
    
    <DataTemplate  x:Key="SBX3DViewTextclassCellEditorTemplate">
        <rkt:SBField x:Name="PART_SBField"
                     SBValue="{xcdg:CellEditorBinding}"
                     Style="{DynamicResource SBXCardViewSBFieldStyle}"
                     rkt:SBUISupport.TemplateName="SBX3DViewTextclassCellEditorTemplate"
                     />
    </DataTemplate>

    <!-- *********************** -->
    <!-- ComboBox DataTemplates  -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBX3DViewComboBoxCellContentTemplate" >
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{Binding}"
                        Style="{DynamicResource SBXCardViewSBComboBoxContentStyle}"
                        rkt:SBUISupport.TemplateName="SBX3DViewComboBoxCellContentTemplate"
                        rkt:SBGridControl.IsCurrentField="False"
                        />
    </DataTemplate>

    <DataTemplate  x:Key="SBX3DViewComboBoxCellEditorTemplate">
        <rkt:SBComboBox x:Name="PART_SBField"
                        SBValue="{xcdg:CellEditorBinding}"
                        Style="{DynamicResource SBXCardViewSBComboBoxStyle}"
                        rkt:SBUISupport.TemplateName="SBX3DViewComboBoxCellEditorTemplate"
                        />
    </DataTemplate>

    <!-- *********************** -->
    <!-- Toggle DataTemplates    -->
    <!-- *********************** -->
    <DataTemplate x:Key="SBX3DViewToggleCellContentTemplate" >
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource SBXCardViewSBToggleContentStyle}"
                      rkt:SBUISupport.TemplateName="SBX3DViewToggleCellContentTemplate"
                      SBValue="{Binding}"
                      rkt:SBGridControl.IsCurrentField="False"
            />
    </DataTemplate>

    <DataTemplate  x:Key="SBX3DViewToggleCellEditorTemplate">
        <rkt:SBToggle x:Name="PART_SBField"
                      Style="{DynamicResource SBXCardViewSBToggleStyle}"
                      rkt:SBUISupport.TemplateName="SBX3DViewToggleCellEditorTemplate"
                      SBValue="{xcdg:CellEditorBinding}"
            />
    </DataTemplate>

    <!-- SBXSeparatorTemplate -->
    <DataTemplate x:Key="SBXSeparatorTemplate">
        <TextBlock Style="{DynamicResource SBXSeparatorStyle}" 
                   rkt:SBUISupport.TemplateName="SBXSeparatorTemplate"
                   Text="" />
    </DataTemplate>

    <!-- *************************************************** -->
    <!-- StackedDataRowTemplate                             -->
    <!-- Using a StackPanel to lay the cells out vertically  -->
    <!-- *************************************************** -->
    <ControlTemplate x:Key="StackedDataRowTemplate"  TargetType="{x:Type xcdg:DataRow}">

        <!-- This is the Border of the DataRow. We simply make sure that it will reflect
                        the relevant DataRow's properties. -->
        <!-- The consequence of naming the Expander "PART_RowFocusRoot" is that
                       the DataGridControl will automatically focus this Element when 
                       navigating. Without this, the grid would focus the PART_CellsHost. -->
        <Border x:Name="PART_RowFocusRoot"
                VerticalAlignment="Top"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
                rkt:SBUISupport.TemplateName="StackedDataRowTemplate"
                >
            <Grid>
                <Rectangle Style="{DynamicResource SBBorderRectangleStyle}"/>

                <Border BorderThickness="2" Padding="6" Background="{DynamicResource SBFormBorderBackground}" >

                    <!-- This stack panel will contain all the fields laid out in a vertical list. -->
                    <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"
                           Grid.IsSharedSizeScope="True" />

                </Border>
            </Grid>
        </Border>

    </ControlTemplate>

    <!-- *************************************************** -->
    <!-- VerticalWrapDataRowTemplate                         -->
    <!-- Using a WrapPanel to lay the cells out vertically   -->
    <!-- *************************************************** -->
    <ControlTemplate x:Key="VerticalWrapDataRowTemplate"  TargetType="{x:Type xcdg:DataRow}">
        <!-- This is the Border of the DataRow. We simply make sure that it will reflect
                        the relevant DataRow's properties. -->
        <!-- The consequence of naming the Expander "PART_RowFocusRoot" is that
                       the DataGridControl will automatically focus this Element when 
                       navigating. Without this, the grid would focus the PART_CellsHost. -->
        <!--<Border x:Name="PART_RowFocusRoot"
                    VerticalAlignment="Top"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}">-->

        <Grid x:Name="PART_RowFocusRoot"
              rkt:SBUISupport.TemplateName="VerticalWrapDataRowTemplate"
              >

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Rectangle Style="{DynamicResource SBBorderRectangleStyle}"/>

            <Border BorderThickness="2" Padding="6" Background="{DynamicResource SBFormBorderBackground}" >

                <!-- This stack panel will contain all the fields laid out in a vertical list. -->
                <WrapPanel x:Name="PART_CellsHost"
                               Orientation="Horizontal"
                               Grid.IsSharedSizeScope="True" />

            </Border>
        </Grid>
        <!--</Border>-->

    </ControlTemplate>

    <!-- ************************************************** -->
    <!-- VerticalWithImageDataRowTemplate                   -->
    <!-- Using a StackPanel to lay the cells out vertically -->
    <!-- ************************************************** -->
    <ControlTemplate x:Key="VerticalWithImageDataRowTemplate"  TargetType="{x:Type xcdg:DataRow}">

        <!-- This is the Border of the DataRow. We simply make sure that it will reflect
                        the relevant DataRow's properties. -->
        <!-- The consequence of naming the Expander "PART_RowFocusRoot" is that
                       the DataGridControl will automatically focus this Element when 
                       navigating. Without this, the grid would focus the PART_CellsHost. -->
        <Border x:Name="PART_RowFocusRoot"
                VerticalAlignment="Top"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
                rkt:SBUISupport.TemplateName="VerticalWithImageDataRowTemplate"
                >
            <Grid>

                <Rectangle Style="{DynamicResource SBBorderRectangleStyle}"/>

                <Border BorderThickness="2" Padding="6" Background="{DynamicResource SBFormBorderBackground}" >

                    <!-- Grid.IsSharedSizeScope="True" is set so that all the column in the cell grids line up correctly. -->
                    <DockPanel >

                        <Grid DockPanel.Dock="Left"
                           Margin="3,4,2,2"
                           MaxWidth="85"
                           MaxHeight="85">
                            <Border Background="#66000000"
                                VerticalAlignment="Bottom"
                                Margin="4,4,0,0">

                                <xcdg:DataCell FieldName="{rkt:SBXFindColumnFieldName FieldNameProperty=ImageField}"
                                          Template="{DynamicResource SBTitleLessCell}">
                                    <xcdg:DataCell.RenderTransform>
                                        <TranslateTransform Y="-4"
                                                     X="-4"/>
                                    </xcdg:DataCell.RenderTransform>
                                </xcdg:DataCell>
                            </Border>
                        </Grid>

                        <StackPanel>


                            <StackPanel x:Name="PART_CellsHost"
                           Orientation="Vertical"
                           Grid.IsSharedSizeScope="True" 
                            />

                        </StackPanel>
                    </DockPanel>

                </Border>
            </Grid>
        </Border>

    </ControlTemplate>

    <!-- ************************** -->
    <!-- TEMPLATE: SBXGridControl   -->
    <!-- VerticalLayoutGridTemplate -->
    <!-- ************************** -->
    <ControlTemplate x:Key="VerticalLayoutGridTemplate"
                    TargetType="rkt:SBXGridControl">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

            <!-- The AdornerDecorator will allow visual cues for Drag & Drop operations. -->
            <AdornerDecorator x:Name="PART_DragDropAdornerDecorator">
                <!-- The CardViewScrollViewer takes care of laying out the various sections of
              a DataGrid in CardView: FixedHeaders, FixedFooters, etc. -->
                <!--FixedSize="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).CardWidth, Mode=TwoWay}"-->
                <xcdg:CardViewScrollViewer x:Name="PART_ScrollViewer"
                                            Padding="{TemplateBinding Padding}"
                                            HorizontalScrollBarVisibility="Auto">

                    <xcdg:CardViewItemsHost Margin="0,15,0,5" 
                                             Orientation="Horizontal"
                                             AllowCardResize="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AllowCardResize}"
                                             SeparatorLinePen="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).SeparatorLinePen}" />
                </xcdg:CardViewScrollViewer>
            </AdornerDecorator>

        </Border>

    </ControlTemplate>

</ResourceDictionary>
