<!--

       Name    : BaseSBFormStyle.xaml
       Author  : Kendrew Peacey
    
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
              Module  %M%     Version %I%     Date    %H%
              
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:rkt="http://schemas.sbxa.com/WPFControls"
    xmlns:sbs="http://schemas.sbxa.com/Shared"
   >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!-- BaseSBFormStyle TargetType="{x:Type rkt:SBForm}" -->
    <Style x:Key="BaseSBFormStyle" >
        <Setter Property="rkt:SBUISupport.StyleName" Value="BaseSBFormStyle" />
        <Setter Property="Control.Focusable" Value="False" />
        <Setter Property="rkt:SBForm.IsMaximizable" Value="False" />
        <Setter Property="rkt:SBForm.IsMinimizable" Value="False" />
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="Control.Visibility" Value="{Binding Path=(rkt:SBGUIAttribute.SBDrawable), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBDrawableConverter}}" />
        <Setter Property="rkt:SBContentControl.CharacterLayoutTemplate" Value="{DynamicResource SBCharacterFormTemplate}" />
        <Setter Property="rkt:SBGUIAttribute.SBTitle" Value="{Binding Path=GuiObjectDefinition.Title, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="Control.Background" Value="Transparent" />
        <Setter Property="rkt:SBControl.SBControlBackground" Value="{DynamicResource SBControlBackground}" />
        <Setter Property="rkt:SBPlusWindow.ViewboxStretchMode" Value="Fill" />
        <Setter Property="rkt:SBForm.CanHostStatusBar" Value="true" />
        <Setter Property="rkt:SBUISupport.ZoomValue" Value="{Binding Path=(rkt:SBUISupport.ZoomValue), Source={x:Static rkt:SBPlus.Current}}" />
        <!-- The following settings were suggested by a customer as they are supposed to improve the quality of the text. They were introduced in .Net 4.0 -->
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
        <Setter Property="FrameworkElement.SnapsToDevicePixels" Value="True"/>
        

        <!-- Mapping from server attribute names to XUI properties -->
        <Setter Property="rkt:SBGUIAttribute.SBAttributeMap">
            <Setter.Value>
                <rkt:SBAttributeMap>
                    <rkt:SBAttribute Name="style_name"
                                     GetProperty="(rkt:SBGUIAttribute.SBStyleName)"
                                     SetProperty="(rkt:SBGUIAttribute.SBStyleName)" />
                    <rkt:SBAttribute Name="drawable"
                                     GetProperty="(rkt:SBGUIAttribute.SBDrawable)"
                                     SetProperty="(rkt:SBGUIAttribute.SBDrawable)" />
                    <rkt:SBAttribute Name="title"
                                     GetProperty="(rkt:SBGUIAttribute.SBTitle)"
                                     SetProperty="(rkt:SBGUIAttribute.SBTitle)" />
                    <rkt:SBAttribute Name="background"
                                     GetProperty="(rkt:SBForm.FormBackground)" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBBackground)"/>
                    <rkt:SBAttribute Name="foreground" 
                                     GetProperty="(rkt:SBForm.FormForeground)" GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBForeground)"/>
                    <rkt:SBAttribute2 Name="coordinates"
                                     GetProperty="SBLeft"
                                     GetProperty2="SBTop"
                                     GetConverter2="{StaticResource SBDimensionsMultiConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBCoordinates)"/>
                    <rkt:SBAttribute Name="object_name"
                                     GetProperty="(rkt:SBGUIAttribute.SBObjectName)"
                                     SetProperty="(rkt:SBGUIAttribute.SBObjectName)" />
                    <rkt:SBAttribute2 Name="dimensions"
                                     GetProperty="Control.ActualWidth"
                                     GetProperty2="Control.ActualHeight"
                                     GetConverter2="{StaticResource SBDimensionsMultiConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBDimensions)"/>
                    <rkt:SBAttribute Name="tile"
                                     GetProperty="(rkt:SBGUIAttribute.SBTile)"
                                     SetProperty="(rkt:SBGUIAttribute.SBTile)" />
                    <rkt:SBAttribute Name="border_width"
                                     GetProperty="(rkt:SBForm.FormBorderWidth)"
                                     GetConverter="{StaticResource SBPixelConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBBorderWidth)" />
                    <rkt:SBAttribute Name="border_color"
                                     GetProperty="(rkt:SBGUIAttribute.SBBorderColor)"
                                     GetConverter="{StaticResource SBColorConverter}"
                                     SetProperty="(rkt:SBGUIAttribute.SBBorderColor)" />

                    <!-- Added for SBXA-1691 -->
                    <rkt:SBAttribute Name="parent"
                                     GetProperty="(rkt:SBGUIAttribute.SBParentObjectName)"
                                     SetProperty="(rkt:SBGUIAttribute.SBParentObjectName)" />

                    <!-- Following attributes are mapped to a SBGUI attribute so they can be used, -->
                    <!-- but they are not currently used in our styles -->
                    <rkt:SBAttribute Name="border_style"
                                     GetProperty="(rkt:SBGUIAttribute.SBBorderStyle)"
                                     SetProperty="(rkt:SBGUIAttribute.SBBorderStyle)" />                    
                </rkt:SBAttributeMap>
            </Setter.Value>
        </Setter>

        <!-- Top/Left in WPF pixels from left of screen -->        
        <Setter Property="rkt:SBForm.SBTop"
                Value ="{Binding Path=GuiObjectDefinition.Margin, 
                                 RelativeSource={RelativeSource Mode=Self},
                                 Converter={StaticResource SBTopRelativeToMainConverter},
                                 Mode=OneWay}" />
        
        <Setter Property="rkt:SBForm.SBLeft"
                Value ="{Binding Path=GuiObjectDefinition.Margin,
                        RelativeSource={RelativeSource Mode=Self},
                   Converter={StaticResource SBLeftRelativeToMainConverter},
                   Mode=OneWay}"
                />
        
        <Setter Property="rkt:SBForm.FormBackground">
            <Setter.Value>
                <PriorityBinding FallbackValue="{x:Static SystemColors.WindowBrush}">
                    <Binding Path="(rkt:SBGUIAttribute.SBTile)" Mode="OneWay" Converter="{StaticResource SBTileConverter}" RelativeSource="{RelativeSource Mode=Self}" />
                    <Binding Path="(rkt:SBGUIAttribute.SBBackground)" Mode="OneWay" Converter="{StaticResource SBColorConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Background" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBColorConverter}"/>
                    <Binding Path="(rkt:SBControl.SBControlBackground)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>
        
        <Setter Property="rkt:SBForm.FormForeground">
            <Setter.Value>
                <PriorityBinding FallbackValue="{x:Static SystemColors.WindowBrush}">
                    <Binding Path="(rkt:SBGUIAttribute.SBForeground)" Mode="OneWay" Converter="{StaticResource SBColorConverter}" RelativeSource="{RelativeSource Mode=Self}"/>
                    <Binding Path="GuiObjectDefinition.Foreground" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBColorConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>
            
        
        <Setter Property="rkt:SBForm.FormBorderWidth">
            <Setter.Value>
                <PriorityBinding FallbackValue="{x:Static rkt:GenericConstants.DEFAULT_FORM_BORDER_WIDTH}">
                    <Binding Path="(rkt:SBGUIAttribute.SBBorderWidth)"
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBPixelConverter}"
                             ConverterParameter="ReturnUnsetForEmpty"/>
                    <Binding Path="GuiObjectDefinition.BorderWidth" 
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBUnsetDoubleConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>
        
        <Setter Property="rkt:SBForm.FormBorderColor">
            <Setter.Value>
                <PriorityBinding >
                    <PriorityBinding.FallbackValue>
                        <LinearGradientBrush EndPoint="0.738,0.989" StartPoint="0.279,0.018">
                            <GradientStop Color="#FF3B9DD1" Offset="1"/>
                            <GradientStop Color="#FF73C5F0" Offset="0"/>
                        </LinearGradientBrush>
                    </PriorityBinding.FallbackValue>
                    <Binding Path="(rkt:SBGUIAttribute.SBBorderColor)"
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"
                             />
                    <Binding Path="GuiObjectDefinition.SBBorderColor" 
                             Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"
                             Converter="{StaticResource SBColorConverter}"/>
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <!-- if this form is using column and row positioning then I need to create the content as a SBCharacterLayout -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=WillSendSBCommands, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" Value="true"/>
                    <Condition Binding="{Binding Path=(rkt:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="false"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Template" Value="{Binding Path=(rkt:SBContentControl.CharacterLayoutTemplate), RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="rkt:SBUISupport.TemplateName" Value="rkt:SBContentControl.CharacterLayoutTemplate" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=WillSendSBCommands, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" Value="true"/>
                    <Condition Binding="{Binding Path=(rkt:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Control.Template" Value="{DynamicResource SBFormTemplate}" />
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBFormTemplate" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=WillSendSBCommands, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="false">
                <Setter Property="Control.Template" Value="{DynamicResource SBGenericFormTemplate}" />
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBGenericFormTemplate" />
            </DataTrigger>

            <!-- if we are using pixel positioning set the form width. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(rkt:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="true"/>
                    <Condition Binding="{Binding Path=GuiObjectDefinition.Width, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="rkt:SBForm.FormWidth" Value="{Binding Path=GuiObjectDefinition.Width, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
            </MultiDataTrigger>

            <!-- if we are using pixel positioning set the form height. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(rkt:SBControl.UsePixelPositioning), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="true"/>
                    <Condition Binding="{Binding Path=GuiObjectDefinition.Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="rkt:SBForm.FormHeight" Value="{Binding Path=GuiObjectDefinition.Height, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
            </MultiDataTrigger>
           
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False">
                <Setter Property="rkt:SBGUIAttribute.SBStyleName" Value="{Binding Path=GuiObjectDefinition.StyleName, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
            </DataTrigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>