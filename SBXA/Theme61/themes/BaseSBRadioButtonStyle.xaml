<!--

       Name    : BaseSBRadioButtonStyle.xaml
       Author  : Kendrew Peacey
    
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
              Module  %M%     Version %I%     Date    %H%
              
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:rkt="http://schemas.sbxa.com/WPFControls"
    xmlns:sbp="http://schemas.sbxa.com/WPFControls"
    >
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/SbControl.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBControlStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <Style TargetType="{x:Type rkt:SBRadioButton}" x:Key="BaseSBRadioButtonStyle" >
        <Setter Property="Margin" Value="2,2,2,2" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="rkt:SBControl.SBControlStyle" Value="{Binding Path=SBControlStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBRadio}}}" />
        <Setter Property="rkt:SBControl.SBFocusControlStyle" Value="{Binding Path=SBFocusControlStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBRadio}}}" />
        <Setter Property="SBFocusContentTemplate" Value="{Binding Path=SBFocusContentTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBRadio}}}" />
        <Setter Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBField}}, Mode=OneWay}" />
        <Setter Property="rkt:SBUISupport.StyleName" Value="BaseSBRadioButtonStyle" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type rkt:SBRadioButton}">
                    <RadioButton
                        rkt:SBControlDefinition.IsFocusedItem="{Binding Path=(rkt:SBControlDefinition.IsFocusedItem), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                        IsChecked="{Binding Path=RadioButtonDefinition.IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                        GroupName="{Binding Path=GuiObjectDefinition.FieldDefinition.FieldName, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                         Style="{Binding Path=SBControlStyle, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                        ContentTemplate="{Binding Path=ContentTemplate, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                        Content="{Binding Path=RadioButtonDefinition.Label, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter ={StaticResource SBRadioButtonTextToRichContentConverter}}"
                        x:Name="PART_SBRadioButton"
                        IsEnabled="{Binding Path =IsEditable, RelativeSource={RelativeSource TemplatedParent}}"                        
                        />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            
            <!-- This trigger will check to see if the server is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>
            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>

</ResourceDictionary>