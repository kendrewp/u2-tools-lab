<!--

       Name    : SBForm.templates.xaml
       Author  : Kendrew Peacey
    
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
              Module  %M%     Version %I%     Date    %H%
              
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rkt="http://schemas.sbxa.com/WPFControls"
                    xmlns:sbcus="clr-namespace:SBXA.UI.Client"
                    xmlns:sbs="http://schemas.sbxa.com/Shared"
                    xmlns:sbp="http://schemas.sbxa.com/WPFControls"
                    >
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- SBCustomFormWithBorderTemplate -->
    <ControlTemplate x:Key="SBCustomFormWithBorderTemplate" TargetType="{x:Type ContentControl}">
        <Grid KeyboardNavigation.IsTabStop="False" rkt:SBUISupport.TemplateName="SBCustomFormWithBorderTemplate">
            <Rectangle x:Name="PART_SBBorderRectangle" Style="{DynamicResource SBBorderRectangleStyle}" />

            <Border x:Name="PART_SBFormContentHeaderBorder" 
                        KeyboardNavigation.IsTabStop="False"
                        Style="{DynamicResource SBFormContentHeaderBorderStyle}"
                        >
                <Control Style="{DynamicResource SBFormTitleStyle}" x:Name="PART_SBFormTitle"/>
            </Border>

            <Border x:Name="PART_SBFormBorder"
                        Style="{DynamicResource SBFormBorderStyle}"
                        >

                <DockPanel LastChildFill="True">

<!--                    <rkt:SBStatusBar x:Name="PART_FormStatusBar"  -->
<!--                                     Visibility="Collapsed"-->
<!--                                     DockPanel.Dock="Bottom"-->
<!--                                     InputStatusVisibility="Collapsed"-->
<!--                                     OptionsMenuVisibility="Collapsed"-->
<!--                                     ConnectionStatusVisibility="Collapsed"-->
<!--                                     ZoomSliderVisibility="Collapsed"-->
<!--                                     VerticalAlignment="Bottom"-->
<!--                                     IsHelpMessage="False"-->
<!--                                     Message="{Binding Path=ServerStatusBarMessage, Mode=OneWay, Source={x:Static rkt:SBPlus.Current}}"-->
<!--                                     />-->

<!--                    <rkt:SBMenuPresenter DockPanel.Dock="Top" -->
<!--                                             HorizontalAlignment="Stretch"-->
<!--                                             x:Name="PART_SBFormMenuPresenter"-->
<!--                                             MenuBar="{Binding Path=MenuBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm}}, Mode=OneWay}"-->
<!--                                             ActiveToolbars="{Binding Path=ActiveToolbars, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                             rkt:SBMenuPresenter.IsActionBarVisible="True"-->
<!--                                             rkt:SBMenuPresenter.IsButtonBarVisible="True"-->
<!--                                         />-->

<!--                    <rkt:SBButtonBar Visibility="{Binding Path=FunctionKeys.Loaded, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, -->
<!--                                                      Converter={StaticResource SBBoolToVisibilityConverter}, Mode=OneWay}"-->
<!--                                     DockPanel.Dock="{Binding Path=FunctionKeys.Horizontal, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, -->
<!--                                                      Converter={StaticResource SBBoolToDockConverter}, Mode=OneWay}"-->
<!--                                     ButtonParent="{Binding Path=FunctionKeys.ButtonParent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                     Buttons="{Binding Path=FunctionKeys.Buttons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                     MinWidth="{Binding Path=FunctionKeys.Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                     MinHeight="{Binding Path=FunctionKeys.Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                     MinButtonHeight="{Binding Path=FunctionKeys.MinButtonHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"-->
<!--                                     ButtonPadding="4,0"-->
<!--                                       />-->

                    <ScrollViewer HorizontalScrollBarVisibility="Auto" 
                                      VerticalScrollBarVisibility="Auto"
                                      >

                        
                        <ContentPresenter x:Name="PART_SBFormContent"
                                          HorizontalAlignment="Left"
                                          Style="{DynamicResource SBFormContentStyle}"
                                          Content="{Binding Path=CustomContent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBCustomForm} }}"
                            >
                            
                            <ContentPresenter.LayoutTransform>

                                <ScaleTransform x:Name="PART_SBFormScaleTransform" 
                                                CenterX="{Binding Path=FormCenterX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }}"
                                                CenterY="{Binding Path=FormCenterY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }}"
                                                ScaleX="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }}"
                                                ScaleY="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }}"
                                                />

                            </ContentPresenter.LayoutTransform>

                        </ContentPresenter>


                    </ScrollViewer>

                </DockPanel>

            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- This trigger will check to see if the server is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- StatusBar Triggers -->
            <!-- Check to see if I am connected, have a SYSID, am running wiht self contained forms and the form is in focus. -->
<!--            <MultiDataTrigger>-->
<!--                <MultiDataTrigger.Conditions>-->
<!--                    <Condition Binding="{Binding Path=CanHostStatusBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="true"/>-->
<!--                    <Condition Binding="{Binding Path=ConnectionStatus, Source={x:Static rkt:SBPlus.Current}}" Value="Connected"/>-->
<!--                    <Condition Binding="{Binding Path=CurrentSystemId, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>-->
<!--                    <Condition Binding="{Binding Path=SBUserPreferences.SelfContainedForms, Source={x:Static rkt:SBPlus.Current}}" Value="true"/>-->
<!--                </MultiDataTrigger.Conditions>-->
<!--                <Setter TargetName="PART_FormStatusBar" Property="Visibility" Value="Visible" />-->
<!---->
<!--            </MultiDataTrigger>-->

<!--            <DataTrigger Binding="{Binding Path=HelpMessage, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False">-->
<!--                <Setter TargetName="PART_FormStatusBar" Property="IsHelpMessage" Value="True" />-->
<!--                <Setter TargetName="PART_FormStatusBar" Property="Message" Value="{Binding Path=SBPlus.HelpMessage, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource SBXamlConverter}}" />-->
<!--            </DataTrigger>-->

<!--            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="True">-->
<!--                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Visible" />-->
<!--            </DataTrigger>-->

<!--            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="False">-->
<!--                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Hidden" />-->
<!--            </DataTrigger>-->


        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBFormWithBorderTemplate -->
    <ControlTemplate x:Key="SBFormWithBorderTemplate" TargetType="{x:Type ContentControl}">

        <!-- SBXA- -->
            <Grid KeyboardNavigation.IsTabStop="False" rkt:SBUISupport.TemplateName="SBFormWithBorderTemplate">

                <Rectangle x:Name="PART_SBBorderRectangle" Style="{DynamicResource SBBorderRectangleStyle}" />

                <Border x:Name="PART_SBFormContentHeaderBorder" 
                        KeyboardNavigation.IsTabStop="False"
                        Style="{DynamicResource SBFormContentHeaderBorderStyle}"
                        >
                    <Control Style="{DynamicResource SBFormTitleStyle}" x:Name="PART_SBFormTitle"/>
                </Border>

                <Border x:Name="PART_SBFormBorder"
                        Style="{DynamicResource SBFormBorderStyle}"
                        >

                    <DockPanel LastChildFill="True">

                        <rkt:SBStatusBar x:Name="PART_FormStatusBar"  
                                     Visibility="Collapsed"
                                     DockPanel.Dock="Bottom"
                                     InputStatusVisibility="Collapsed"
                                     OptionsMenuVisibility="Collapsed"
                                     ConnectionStatusVisibility="Collapsed"
                                     ZoomSliderVisibility="Collapsed"
                                     VerticalAlignment="Bottom"
                                     IsHelpMessage="False"
                                     Focusable="False"
                                     Message="{Binding Path=ServerStatusBarMessage, Mode=OneWay, Source={x:Static rkt:SBPlus.Current}}"
                                     />

                        <rkt:SBMenuPresenter DockPanel.Dock="Top" 
                                             HorizontalAlignment="Stretch"
                                             x:Name="PART_SBFormMenuPresenter"
                                             MenuBar="{Binding Path=MenuBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm}}, Mode=OneWay}"
                                             ActiveToolbars="{Binding Path=ActiveToolbars, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                             rkt:SBMenuPresenter.IsActionBarVisible="True"
                                             rkt:SBMenuPresenter.IsButtonBarVisible="True"
                                         />

                        <ScrollViewer x:Name="PART_SBZoomScrollViewer"
                                  Style="{DynamicResource SBZoomScrollViewerStyle}"
                                  >
                            <Grid x:Name="PART_SBZoomGrid">
                                <Grid.LayoutTransform>
                                    <ScaleTransform x:Name="PART_SBFormScaleTransform" 
                                                CenterX="0"
                                                CenterY="0"
                                                ScaleX="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                                ScaleY="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                                />
                                </Grid.LayoutTransform>
                                <DockPanel LastChildFill="True"
                                       MinWidth="{Binding Path=(rkt:SBForm.FormWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                       MinHeight="{Binding Path=(rkt:SBForm.FormHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                       >
                                    <rkt:SBButtonBar
                                     Visibility="{Binding Path=FunctionKeys.Loaded, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToVisibilityConverter}, Mode=OneWay}"
                                     DockPanel.Dock="{Binding Path=FunctionKeys.Horizontal, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToDockConverter}, Mode=OneWay}"
                                     ButtonParent="{Binding Path=FunctionKeys.ButtonParent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     Buttons="{Binding Path=FunctionKeys.Buttons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinWidth="{Binding Path=FunctionKeys.Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinHeight="{Binding Path=FunctionKeys.Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinButtonHeight="{Binding Path=FunctionKeys.MinButtonHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     ButtonPadding="4,0"
                                     Focusable="False"
                                       />
                                    <ContentPresenter x:Name="PART_SBFormContent"
                                                      Style="{DynamicResource SBFormContentStyle}"
                                                      >
                                    </ContentPresenter>
                                </DockPanel>
                            </Grid>

                        </ScrollViewer>

                    </DockPanel>

                </Border>

            </Grid>

        <ControlTemplate.Triggers>
            <!-- This trigger will check to see if the server is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- StatusBar Triggers -->
            <!-- Check to see if I am connected, have a SYSID, am running wiht self contained forms and the form is in focus. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=CanHostStatusBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="true"/>
                    <Condition Binding="{Binding Path=ConnectionStatus, Source={x:Static rkt:SBPlus.Current}}" Value="Connected"/>
                    <Condition Binding="{Binding Path=CurrentSystemId, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                    <Condition Binding="{Binding Path=SBUserPreferences.SelfContainedForms, Source={x:Static rkt:SBPlus.Current}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_FormStatusBar" Property="Visibility" Value="Visible" />

            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=HelpMessage, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False">
                <Setter TargetName="PART_FormStatusBar" Property="IsHelpMessage" Value="True" />
                <Setter TargetName="PART_FormStatusBar" Property="Message" Value="{Binding Path=SBPlus.HelpMessage, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource SBXamlConverter}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="True">
                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Visible" />
                <Setter TargetName="PART_FormStatusBar" Property="ProgressMonitor" Value="{Binding Path=ProgressMonitor, Source={x:Static rkt:SBPlus.Current}, Mode=OneWay}" />
                <Setter TargetName="PART_FormStatusBar" Property="ProgressBarVisibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="False">
                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Hidden" />
            </DataTrigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBIntuitiveHelpFormTemplate -->
    <ControlTemplate x:Key="SBIntuitiveHelpFormTemplate" TargetType="{x:Type ContentControl}">
        <Grid KeyboardNavigation.IsTabStop="False" rkt:SBUISupport.TemplateName="SBIntuitiveHelpFormTemplate">
            <Rectangle x:Name="PART_SBBorderRectangle" Style="{DynamicResource SBBorderRectangleStyle}" />

            <Border x:Name="PART_SBFormContentHeaderBorder" 
                        KeyboardNavigation.IsTabStop="False"
                        Style="{DynamicResource SBFormContentHeaderBorderStyle}"
                        >
                <Control Style="{DynamicResource SBFormTitleStyle}" x:Name="PART_SBFormTitle"/>
            </Border>

            <Border x:Name="PART_SBFormBorder"
                        Style="{DynamicResource SBFormBorderStyle}"
                        >

                <DockPanel LastChildFill="True">

                    <rkt:SBStatusBar x:Name="PART_FormStatusBar"  
                                     Visibility="Collapsed"
                                     DockPanel.Dock="Bottom"
                                     InputStatusVisibility="Collapsed"
                                     OptionsMenuVisibility="Collapsed"
                                     ConnectionStatusVisibility="Collapsed"
                                     ZoomSliderVisibility="Collapsed"
                                     VerticalAlignment="Bottom"
                                     IsHelpMessage="False"
                                     Focusable="False"
                                     Message="{Binding Path=ServerStatusBarMessage, Mode=OneWay, Source={x:Static rkt:SBPlus.Current}}"
                                     />

                    <rkt:SBMenuPresenter DockPanel.Dock="Top" 
                                             HorizontalAlignment="Stretch"
                                             x:Name="PART_SBFormMenuPresenter"
                                             MenuBar="{Binding Path=MenuBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm}}, Mode=OneWay}"
                                             ActiveToolbars="{Binding Path=ActiveToolbars, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                             rkt:SBMenuPresenter.IsActionBarVisible="True"
                                             rkt:SBMenuPresenter.IsButtonBarVisible="True"
                                         />

                    <rkt:SBButtonBar Visibility="{Binding Path=FunctionKeys.Loaded, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToVisibilityConverter}, Mode=OneWay}"
                                     DockPanel.Dock="{Binding Path=FunctionKeys.Horizontal, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToDockConverter}, Mode=OneWay}"
                                     ButtonParent="{Binding Path=FunctionKeys.ButtonParent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     Buttons="{Binding Path=FunctionKeys.Buttons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinWidth="{Binding Path=FunctionKeys.Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinHeight="{Binding Path=FunctionKeys.Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinButtonHeight="{Binding Path=FunctionKeys.MinButtonHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     ButtonPadding="4,0"
                                     Focusable="False"
                                       />

                        <ContentPresenter x:Name="PART_SBFormContent"
                                          HorizontalAlignment="Stretch"
                                          Style="{DynamicResource SBFormContentStyle}"
                                          >
                        </ContentPresenter>
                    
                </DockPanel>

            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- This trigger will check to see if the server is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Dormant" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- This trigger will check to see if the client is busy and if we should show the hour glass, if both are true then the cursor is change to the Wait cursor. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=ApplicationDefinition.IsHourGlassEnabled, Source={x:Static rkt:SBPlus.Current}}" Value="true" />
                    <Condition Binding="{Binding Path=InputState, Source={x:Static rkt:SBPlus.Current}}" Value="Busy" />
                </MultiDataTrigger.Conditions>
                <Setter Property="FrameworkElement.Cursor" Value="Wait" />
            </MultiDataTrigger>

            <!-- StatusBar Triggers -->
            <!-- Check to see if I am connected, have a SYSID, am running wiht self contained forms and the form is in focus. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=CanHostStatusBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="true"/>
                    <Condition Binding="{Binding Path=ConnectionStatus, Source={x:Static rkt:SBPlus.Current}}" Value="Connected"/>
                    <Condition Binding="{Binding Path=CurrentSystemId, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                    <Condition Binding="{Binding Path=SBUserPreferences.SelfContainedForms, Source={x:Static rkt:SBPlus.Current}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_FormStatusBar" Property="Visibility" Value="Visible" />

            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=HelpMessage, Source={x:Static rkt:SBPlus.Current}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False">
                <Setter TargetName="PART_FormStatusBar" Property="IsHelpMessage" Value="True" />
                <Setter TargetName="PART_FormStatusBar" Property="Message" Value="{Binding Path=SBPlus.HelpMessage, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource SBXamlConverter}}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="True">
                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Visible" />
                <Setter TargetName="PART_FormStatusBar" Property="ProgressMonitor" Value="{Binding Path=ProgressMonitor, Source={x:Static rkt:SBPlus.Current}, Mode=OneWay}" />
                <Setter TargetName="PART_FormStatusBar" Property="ProgressBarVisibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsCurrentForm, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}" Value="False">
                <Setter TargetName="PART_FormStatusBar" Property="MessageVisibility" Value="Hidden" />
            </DataTrigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBFormWithoutBorderTemplate -->
    <ControlTemplate x:Key="SBFormWithoutBorderTemplate" TargetType="{x:Type ContentControl}">
        <Border x:Name="PART_SBFormBorder"
                Style="{DynamicResource SBFormBorderStyle}"
                Margin="0" 
                >

            <Grid x:Name="PART_SBZoomGrid">
                <Grid.LayoutTransform>
                    <ScaleTransform x:Name="PART_SBFormScaleTransform" 
                                                CenterX="0"
                                                CenterY="0"
                                                ScaleX="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                                ScaleY="{Binding Path=(rkt:SBUISupport.ZoomValue), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                                />
                </Grid.LayoutTransform>
                <DockPanel LastChildFill="True"
                                       MinWidth="{Binding Path=(rkt:SBForm.FormWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                       MinHeight="{Binding Path=(rkt:SBForm.FormHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm} }}"
                                       >
                    <rkt:SBButtonBar
                                     Visibility="{Binding Path=FunctionKeys.Loaded, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToVisibilityConverter}, Mode=OneWay}"
                                     DockPanel.Dock="{Binding Path=FunctionKeys.Horizontal, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, 
                                                      Converter={StaticResource SBBoolToDockConverter}, Mode=OneWay}"
                                     ButtonParent="{Binding Path=FunctionKeys.ButtonParent, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     Buttons="{Binding Path=FunctionKeys.Buttons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinWidth="{Binding Path=FunctionKeys.Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinHeight="{Binding Path=FunctionKeys.Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     MinButtonHeight="{Binding Path=FunctionKeys.MinButtonHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:ISBForm} }, Mode=OneWay}"
                                     ButtonPadding="4,0"
                                     Focusable="False"
                                       />
                    <ContentPresenter x:Name="PART_SBFormContent"
                                            DockPanel.Dock="Top"
                                            HorizontalAlignment="Left"
                                            Style="{DynamicResource SBFormContentStyle}"
                                            >
                    </ContentPresenter>
                </DockPanel>
            </Grid>

        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Width" Value="NaN">
                <Setter Property="HorizontalAlignment" TargetName="PART_SBFormContent" Value="Stretch"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!-- SBBlankFormTemplate -->
    <!-- This style is used to clear the template of a control in order to prevent memory leaks. -->
    <ControlTemplate x:Key="SBBlankFormTemplate" />

    <!-- SBFormTemplate -->
    <ControlTemplate x:Key="SBFormTemplate">

        <ContentControl 
                            x:Name="PART_SBFormContent" 
                            Content="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent }}"
                            Style="{DynamicResource SBFormContainerStyle}"
                            ContextMenu="{Binding Path=GuiObjectDefinition.ContextMenuDefinition,
                                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}},
                                                  Converter={StaticResource SBContextMenuConverter}}"
                      >
            <ContentControl.InputBindings>
                <KeyBinding Command="rkt:SBCommands.SBHelpCommand"
                      Key="F1" />
                <KeyBinding Command="rkt:SBCommands.SBSaveCommand"
                      Key="F2" />
                <KeyBinding Command="rkt:SBCommands.SBIntuitiveHelpCommand"
                      Key="F3" />
                <KeyBinding Command="rkt:SBCommands.SBDeleteRecordCommand"
                      Key="F4" />
                <KeyBinding Command="rkt:SBCommands.F5Command"
                      Key="F5" />
                <KeyBinding Command="rkt:SBCommands.F6Command"
                      Key="F6" />
                <KeyBinding Command="rkt:SBCommands.F7Command"
                      Key="F7" />
                <KeyBinding Command="rkt:SBCommands.F8Command"
                      Key="F8" />
                <KeyBinding Command="rkt:SBCommands.F9Command"
                      Key="F9" />
                <KeyBinding Command="rkt:SBCommands.F10Command"
                      Key="F10" />
                <KeyBinding Command="rkt:SBCommands.F11Command"
                      Key="F11" />
                <KeyBinding Command="rkt:SBCommands.F12Command"
                      Key="F12" />
                <KeyBinding Command="rkt:SBCommands.F13Command"
                      Key="F13" />
                <KeyBinding Command="rkt:SBCommands.F14Command"
                      Key="F14" />
                <KeyBinding Command="rkt:SBCommands.F15Command"
                      Key="F15" />
                <KeyBinding Command="rkt:SBCommands.F16Command"
                      Key="F16" />
                <KeyBinding Command="rkt:SBCommands.ShiftF1Command"
                      Modifiers="Shift"
                      Key="F1" />
                <KeyBinding Command="rkt:SBCommands.ShiftF2Command"
                      Modifiers="Shift"
                      Key="F2" />
                <KeyBinding Command="rkt:SBCommands.ShiftF3Command"
                      Modifiers="Shift"
                      Key="F3" />
                <KeyBinding Command="rkt:SBCommands.ShiftF4Command"
                      Modifiers="Shift"
                      Key="F4" />
                <KeyBinding Command="rkt:SBCommands.ShiftF5Command"
                      Modifiers="Shift"
                      Key="F5" />
                <KeyBinding Command="rkt:SBCommands.ShiftF6Command"
                      Modifiers="Shift"
                      Key="F6" />
                <KeyBinding Command="rkt:SBCommands.ShiftF7Command"
                      Modifiers="Shift"
                      Key="F7" />
                <KeyBinding Command="rkt:SBCommands.ShiftF8Command"
                      Modifiers="Shift"
                      Key="F8" />
                <KeyBinding Command="rkt:SBCommands.ShiftF9Command"
                      Modifiers="Shift"
                      Key="F9" />
                <KeyBinding Command="rkt:SBCommands.ShiftF10Command"
                      Modifiers="Shift"
                      Key="F10" />
                <KeyBinding Command="rkt:SBCommands.SBCtrlxCommand"
                      Modifiers="Control"                                
                      Key="X" />
                <KeyBinding Command="rkt:SBCommands.SBExtendLengthCommand"
                      Modifiers="Control"
                      Key="End" />
                <KeyBinding Command="rkt:SBCommands.SBShiftTabCommand"
                      Modifiers="Shift"
                      Key="Tab" />
                <KeyBinding Command="rkt:SBCommands.SBTabCommand"
                      Key="Tab" />
                <KeyBinding Command="rkt:SBCommands.SBDownCommand"
                      Key="Down" />
                <KeyBinding Command="rkt:SBCommands.SBUpCommand"
                      Key="Up" />
                <KeyBinding Command="rkt:SBCommands.SBPageUpCommand"
                      Key="PageUp" />
                <KeyBinding Command="rkt:SBCommands.SBPageDownCommand"
                      Key="PageDown" />
                <KeyBinding Command="rkt:SBCommands.IncreaseZoomCommand"
                      Modifiers="Control"
                      Key="Add" />
                <KeyBinding Command="rkt:SBCommands.DecreaseZoomCommand"
                      Modifiers="Control"
                      Key="Subtract" />
            </ContentControl.InputBindings>

        </ContentControl>

    </ControlTemplate>

    <!-- SBCharacterFormTemplate -->
    <ControlTemplate x:Key="SBCharacterFormTemplate">
        <!--<rkt:SBStatusBar  DockPanel.Dock="Bottom" VerticalAlignment="Bottom"/>-->

        <ContentControl x:Name="PART_SBFormContent" Style="{DynamicResource SBFormContainerStyle}" >

            <ContentControl.Content>
                <!-- The grid here is needed so that if the form is shrunk the character layout doesn't change size as this will
                     cause infinite recursion in the SuggestedFromWidth/Height properties
                -->
                <Grid>
                    <rkt:SBCharacterLayout x:Name="PART_SBFormLayoutControl"
                                           ObjectSource="{Binding Path=(rkt:SBGUIAttribute.SBObjectName), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}, Converter={StaticResource SBGetChildrenConverter}}"
                                           RowCount="{Binding Path=ScreenDefinition.MaxRows, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}"
                                           FunctionKeyLocation="{Binding Path=GuiObjectDefinition.FunctionKeyLocation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Top"
                                           rkt:SBUISupport.UpdateFormSize="FormSize"
                                           >
                    
                        <!--ColumnCount="{Binding Path=ScreenDefinition.MaxColumns, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}"-->

                        <!-- Check to make sure if the number of columns on the form have been changed by a style. -->
                        <rkt:SBCharacterLayout.ColumnCount>
                            <PriorityBinding>
                                <Binding Path="(rkt:SBCharacterLayout.CharacterColumnCount)" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBCharacterColumnConverter}" />
                                <Binding Path="ScreenDefinition.MaxColumns" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBCharacterColumnConverter}"/>
                            </PriorityBinding>
                        </rkt:SBCharacterLayout.ColumnCount>

                        <!-- Fallback to determine the width of each column -->
                        <rkt:SBCharacterLayout.ColumnWidth>
                            <PriorityBinding FallbackValue="{x:Static rkt:GenericConstants.DEFAULT_CELL_WIDTH}">
                                <Binding Path="GuiObjectDefinition.GridCellWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                                <Binding Path="SBPlus.SBUserPreferences.GridCellWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                            </PriorityBinding>
                        </rkt:SBCharacterLayout.ColumnWidth>

                        <!-- Fallback to determine the height of each column -->
                        <rkt:SBCharacterLayout.RowHeight>
                            <PriorityBinding FallbackValue="{x:Static rkt:GenericConstants.DEFAULT_CELL_HEIGHT}">
                                <Binding Path="GuiObjectDefinition.GridCellHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                                <Binding Path="SBPlus.SBUserPreferences.GridCellHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                            </PriorityBinding>
                        </rkt:SBCharacterLayout.RowHeight>

                    </rkt:SBCharacterLayout>
                </Grid>
            </ContentControl.Content>

        </ContentControl>

    </ControlTemplate>

    <!-- SBMultiFormCharacterFormTemplate -->
    <ControlTemplate x:Key="SBMultiFormCharacterFormTemplate">

        <ContentControl x:Name="PART_SBFormContent" Style="{DynamicResource SBFormContainerStyle}" >

            <ContentControl.Content>
                <Grid>
                    <rkt:SBCharacterLayout x:Name="PART_SBFormLayoutControl"
                                       ObjectSource="{Binding Path=(rkt:SBGUIAttribute.SBObjectName), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}, Converter={StaticResource SBGetChildrenConverter}}"
                                       ColumnCount="{Binding Path=GuiObjectDefinition.Coordinates.Length, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBMultiForm}}}"
                                       RowCount="{Binding Path=GuiObjectDefinition.Coordinates.Depth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBMultiForm}}}"
                                       FunctionKeyLocation="{Binding Path=GuiObjectDefinition.FunctionKeyLocation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}}"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Top"
                                       rkt:SBUISupport.UpdateFormSize="MaxTabSize"
                                       >

                        <!-- Fallback to determine the width of each column -->
                        <rkt:SBCharacterLayout.ColumnWidth>
                            <PriorityBinding FallbackValue="{x:Static rkt:GenericConstants.DEFAULT_CELL_WIDTH}">
                                <Binding Path="GuiObjectDefinition.GridCellWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                                <Binding Path="SBPlus.SBUserPreferences.GridCellWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                            </PriorityBinding>
                        </rkt:SBCharacterLayout.ColumnWidth>

                        <!-- Fallback to determine the height of each column -->
                        <rkt:SBCharacterLayout.RowHeight>
                            <PriorityBinding FallbackValue="{x:Static rkt:GenericConstants.DEFAULT_CELL_HEIGHT}">
                                <Binding Path="GuiObjectDefinition.GridCellHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                                <Binding Path="SBPlus.SBUserPreferences.GridCellHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBForm}}" Converter="{StaticResource SBUnsetValueConverter}" />
                            </PriorityBinding>
                        </rkt:SBCharacterLayout.RowHeight>

                    </rkt:SBCharacterLayout>
                </Grid>
            </ContentControl.Content>

        </ContentControl>

    </ControlTemplate>

    <!-- SBGenericFormTemplate -->
    <ControlTemplate x:Key="SBGenericFormTemplate" >
        <ContentControl 
                            x:Name="PART_SBGenericFormContent" 
                            Content="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent }}"
                            Style="{DynamicResource SBFormContainerStyle}"
                      />
    </ControlTemplate>

    <!-- SBHelpFormTemplate -->
    <ControlTemplate TargetType="{x:Type rkt:SBHelpForm}" x:Key="SBHelpFormTemplate">
        <ContentControl IsTabStop="False" Template="{DynamicResource SBFormWithBorderTemplate}">
            <rkt:SBHtmlControl x:Name="PART_HelpControl" 
                               Source ="{Binding Path=Source, RelativeSource={RelativeSource Mode=TemplatedParent},Mode=TwoWay}"
                               HTML ="{Binding Path=HTML, RelativeSource={RelativeSource Mode=TemplatedParent},Mode=TwoWay}"
                               />
            <ContentControl.InputBindings>
                <KeyBinding Command="rkt:SBCommands.SBHelpCommand"
                            Key="F1" />
            </ContentControl.InputBindings>

        </ContentControl>
    </ControlTemplate>

</ResourceDictionary>