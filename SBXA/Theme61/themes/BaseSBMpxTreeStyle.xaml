<!--

       Name    : BaseSBMpxTreeStyle.xaml
       Author  : Pavel Smelianski
       
       ****************************************************************************
           Maintenence log - insert most recent change descriptions at top
    Date    Who Description
    April 4,2013    KP  Removed MPXItemContainerStyle because the handlers are private. 
    April 4,2013    KP  Change StaticResource MPXImContainerStyle to a DynamicResource in BaseSBMpxTreeStyle1.
-->
<ResourceDictionary   
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:rkt="http://schemas.sbxa.com/WPFControls"   
    xmlns:sbs="http://schemas.sbxa.com/WPFControls"
    x:Class="SBXA.UI.WPFControls.SBMpxTreeSupport"
    
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/SbControl.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBControlStyle.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/BaseSBFormStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="MpxContextMenuItemStyle" TargetType="{x:Type MenuItem}" >
      
        <Style.Triggers>
            
            <DataTrigger Binding="{Binding IsSeparator}" Value="True">               
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Separator MinWidth="30" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Command" Value="rkt:SBCommands.MPXTreeContextMenuSeparatorExecuteCommand"/>
                
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSeparator}" Value="False">
                <Setter Property="Command" Value="rkt:SBCommands.MPXTreeContextMenuOptionExecuteCommand"/>
                <Setter Property="CommandParameter" Value="{Binding}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <HierarchicalDataTemplate x:Key="MpxContextMenuItemTemplate" DataType="{x:Type rkt:MenuOption}" ItemsSource="{Binding Path=MenuOptions}" >
        <ContentControl Content="{Binding Path=TextKey, Converter={StaticResource SBMenuItemUnderlineConverter}}" />
    </HierarchicalDataTemplate>

    <Style x:Key="MpxItemTextStyle" TargetType="{x:Type ContentControl}" >
        <Setter Property="Control.FontFamily" Value ="{Binding Path=SBPlus.DefaultFontFamily, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBMpxTree}}, Converter={StaticResource SBUnsetValueConverter}}" />
        <Setter Property="Control.FontSize" Value ="{Binding Path=SBPlus.DefaultFontSize, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBMpxTree}}, Converter={StaticResource SBUnsetValueConverter}}" />
        <Setter Property="Control.FontWeight" Value ="{Binding Path=SBPlus.DefaultFontWeight, Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBMpxTree}}, Converter={StaticResource SBUnsetValueConverter}}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=InlineEditingFlag}" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Text="{Binding Path=TextKey, Mode=OneWay}"> 
                                <TextBlock.ContextMenu>
                                    <ContextMenu ItemsSource="{Binding Path=ContextMenuOptions}" 
                                                 ItemContainerStyle="{StaticResource MpxContextMenuItemStyle}"
                                                 ItemTemplate="{StaticResource MpxContextMenuItemTemplate}"
                                                 />
                                </TextBlock.ContextMenu>
                            </TextBlock>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=InlineEditingFlag}" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBox Text="{Binding Path=TextKey , Mode=TwoWay}">                                 
                            </TextBox>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>    
    
<!-- Removed because the handlers are private.
    <Style x:Key="MPXItemContainerStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}"/>  
        <EventSetter Event="TreeViewItem.KeyDown" Handler="TreeViewItemKeyDown_EventHandler"></EventSetter>
        <EventSetter Event="TreeViewItem.KeyUp" Handler="TreeViewItemKeyUp_EventHandler"></EventSetter>
        <EventSetter Event="TreeViewItem.Expanded" Handler="TreeViewItemExpanded_EventHandler"></EventSetter>
    </Style>
-->
    
    

    <HierarchicalDataTemplate x:Key="MpxItemTemplate" DataType="{x:Type rkt:MenuOption}" ItemsSource="{Binding Path=MenuOptions}">                               
                <StackPanel Orientation="Horizontal">
                    <Image Source="{Binding Path=Icon}"></Image>
            <ContentControl Style="{StaticResource MpxItemTextStyle}" Focusable="False">

            </ContentControl>
        </StackPanel>                                                                            
    </HierarchicalDataTemplate>

    <Style x:Key="BaseSBMpxTreeStyle1" BasedOn="{StaticResource BaseSBFormStyle}" TargetType="{x:Type rkt:SBMpxTree}" >
        <Setter Property="Control.VerticalAlignment" Value="Stretch"/>
        <Setter Property="Control.HorizontalAlignment" Value="Stretch"/>
        <!-- Form width/height set to NaN causes form to be sized to parent -->
        <Setter Property="FormWidth" Value="NaN" />
        <Setter Property="FormHeight" Value="NaN" />        
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="rkt:SBControl.ShouldSendSBCommands" Value="False" />
        <Setter Property="Focusable" Value="True" />

        <Setter Property="rkt:SBGUIAttribute.SBAttributeMap">
            <Setter.Value>
                <rkt:SBAttributeMap>
                    <rkt:SBAttribute Name="emphasized"
                                     GetProperty="IsEnabled"
                                     SetProperty="(rkt:SBGUIAttribute.SBEmphasized)" />
                </rkt:SBAttributeMap>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled">
            <Setter.Value>
                <PriorityBinding FallbackValue="True">
                    <Binding Path="ShouldBeEnabled" Mode="OneWay"  RelativeSource="{RelativeSource Mode=Self}"  Converter="{StaticResource SBUnsetTrueConverter}"/>
                    <Binding Path="(rkt:SBGUIAttribute.SBEmphasized)" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBConverter}"/>                   
                </PriorityBinding>
            </Setter.Value>
        </Setter>
             


        <!--Setter Property="rkt:SBForm.IsMinimizable" Value="{Binding Path=(rkt:SBForm.IsMinimizable), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContentControl}}}" />
        <Setter Property="rkt:SBForm.IsMaximizable" Value="{Binding Path=(rkt:SBForm.IsMinimizable), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContentControl}}}" />
        <Setter Property="rkt:SBForm.IsCachable" Value="False"/>
        <Setter Property="rkt:SBForm.FormBackground" Value="White"/>     
        <Setter Property="rkt:SBForm.IsClosable" Value="False"/-->
        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=WillSendSBCommands, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay }" Value="false">

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type rkt:SBMpxTree}" >
                            <ContentControl >
                                <!--Template="{DynamicResource SBFormTemplate}"-->  
                                
                                <TreeView x:Name="PART_TreeView" BorderThickness="0"                                               
                                              ItemsSource="{Binding Path=MPXTreeDef.MenuOptions, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                                              ItemsControl.ItemTemplate="{StaticResource MpxItemTemplate}"
                                              ItemContainerStyle="{DynamicResource MPXItemContainerStyle}">
                                    </TreeView>
                                <!-- Changed StaticResource MPXItemContainerStyle to DynamicResource MPXItemContainerStyle -->

                                <!--</DockPanel>-->
                                

                            </ContentControl>

                           
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </DataTrigger>
            </Style.Triggers>

    </Style>

</ResourceDictionary>    
