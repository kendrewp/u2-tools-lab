<!--

       Name    : DefaultFieldStyles.xaml
       Author  : Kendrew Peacey
       
    
       Maintenence log - insert most recent change descriptions at top
    
    Date            Who  Tracking #  Style                                      Description
    Jan 12, 2012    AKP              DefaultSBEditTextBoxStyle                  Move VerticalScrollBarVisibility from DefaultSBFocusEditTextBoxStyle to 
                                     DefaultSBFocusEditTextBoxStyle             DefaultSBEditTextBoxStyle so that the ScrollBar is visible when the memo 
                                                                                field is not editable.
    Sept 25, 2011   SCW  SBXA-4725   HiddenSlashComboBoxItemStyle               Set "\" ComboBoxItems' Visibility to Collapsed.
                                     DefaultSBAutoCompleteComboBoxControlStyle  Note that for the AutoCompleteComboBox, this
                                     DefaultSBComboBoxControlStyle              style is applied in code instead.
    June 15, 2011   AKP  SBXA-3625   DefaultSBToggleStyle                       Added binding for IsReadOnly and IsEnabled.
-->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:rkt="http://schemas.sbxa.com/WPFControls" 
    xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="/SBXAWinFxControls;component/Themes/SbControl.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!-- SBEmptyCheckBoxFocusVisual -->
    <Style x:Key="SBEmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Ellipse SnapsToDevicePixels="true" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- SBCheckRadioFocusVisual -->
    <Style x:Key="SBCheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1" Margin="14,0,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- DefaultSBTextBoxStyle -->
    <Style x:Key="DefaultSBTextBoxStyle" BasedOn="{StaticResource SBControlStyle}" TargetType="{x:Type rkt:SBTextBox}" >
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBTextBoxStyle" />
        <Setter Property="TextBlock.TextAlignment" Value="{Binding Path=TextAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="Padding" Value="1"/>
        
        <Setter Property="BorderThickness" Value="0.5"/>
        
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />

        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="rkt:SBField.SelectedText" Value="{Binding Path=(rkt:SBField.SelectedText), RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
        <!--<Setter Property="VerticalContentAlignment" Value="Center"/>-->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ToolTip" Value="{Binding Path=ToolTip, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="Text" Value="{Binding Path=SBValue, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Setter Property="TabIndex" Value="{Binding Path=TabIndex, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="IsTabStop" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="rkt:SBTextBox.CursorPosition" Value="{Binding Path=CursorPosition, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="IsEnabled" Value="{Binding Path=Editable, 
                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                              Mode=TwoWay}"/>
        <Setter Property="TextBox.IsReadOnly" Value="{Binding Path=IsEditable, 
                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                              Mode=TwoWay,
                                                              Converter={StaticResource SBConverter},
                                                              ConverterParameter=reverse}"/>

        <Setter Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBField}}, Mode=OneWay}" />
        
        <!-- SBXA-153 Enabled spell check via a property on the server, which will be set on SBField. -->
        <Setter Property="SpellCheck.IsEnabled" Value="{Binding Path=IsSpellCheckEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="rkt:SBSpellCheck.EnableSpellCheck" Value="{Binding Path=IsSpellCheckEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>

        <!-- Override field fontsize as we need to fall back to 11 as Vista defaults to
             a larger size that doesn't fit in the textbox -->
        <Setter Property="Control.FontSize">
            <Setter.Value>
                <PriorityBinding FallbackValue="11">
                    <Binding Path="(rkt:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="SBPlus.DefaultFontSize" Mode="OneWay" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource SBUnsetValueConverter}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <!-- Need to define the template as the default on Vista uses extra
             space for its chrome border  -->
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border 
                          Name="Border"
                          CornerRadius="0"
                          BorderBrush="Black"
                          BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                          Background="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"
                          >
                        <ScrollViewer Margin="0,0,1,1" x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->

        <!-- The margin of the border was changed to move it in 0.5 a pixel so that it is always visible. (eCase 12246*USA) -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                            CornerRadius="0"
                            BorderBrush="Black"
                            Margin="0,0,0.5,0"
                            BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{TemplateBinding Background}"
                            rkt:SBUISupport.TemplateName="Inline template in DefaultSBTextBoxStyle"
                            >
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Margin="-1,0,0,0" Padding="0" 
                                      VerticalScrollBarVisibility="Disabled"
                                      HorizontalScrollBarVisibility="Disabled"
                                      SnapsToDevicePixels="True"
                                      Foreground="{TemplateBinding Foreground}"
                                      KeyboardNavigation.AcceptsReturn="{Binding Path=AcceptsReturn, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBTextBox}}}"
                                      />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- DefaultSBFocusTextBoxStyle -->
    <Style x:Key="DefaultSBFocusTextBoxStyle" BasedOn="{StaticResource DefaultSBTextBoxStyle}" TargetType="{x:Type rkt:SBTextBox}" >
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0.5"/>
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBFocusTextBoxStyle" />
    </Style>

    <!-- DefaultSBPasswordStyle -->
    <Style x:Key="DefaultSBPasswordStyle"  BasedOn="{StaticResource SBControlStyle}" TargetType="{x:Type PasswordBox}" >
        <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <!--SBToggleContentTemplate -->
    <DataTemplate x:Key="SBToggleFocusContentTemplate" >
        <Grid Margin="{TemplateBinding Control.Padding}" 
              Height="{TemplateBinding Height}"
              >
            <Rectangle
                           SnapsToDevicePixels="True"
                           Stroke="#FF000000"
                           StrokeDashArray="1 2"
                           StrokeThickness="1"                          
                            />
            <TextBlock Text="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        </Grid>

    </DataTemplate>
    <!-- SBToggleContentTemplate -->

    <!-- SBCheckBoxDiamondCrossTemplate -->
    <ControlTemplate x:Key="SBCheckBoxDiamondCrossTemplate" TargetType="{x:Type CheckBox}">
        <BulletDecorator x:Name="PART_SBCheckBoxBulletDecorator" SnapsToDevicePixels="true" Background="Transparent">

            <BulletDecorator.Bullet>
                <Border x:Name="Border"
                        Width="13" 
                        Height="13" 
                        CornerRadius="0" 
                        Background="{TemplateBinding Background}"
                        BorderThickness="1"
                        BorderBrush="{TemplateBinding BorderBrush}" RenderTransformOrigin="0.5,0.5">
                    <Border.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                            <SkewTransform AngleX="0" AngleY="0"/>
                            <RotateTransform Angle="45"/>
                            <TranslateTransform X="0" Y="0"/>
                        </TransformGroup>
                    </Border.RenderTransform>
                    <Path  
                        Width="7" Height="7" 
                        x:Name="CheckMark"
                        SnapsToDevicePixels="False" 
                        Stroke="{StaticResource SBGlyphBrush}"
                        StrokeThickness="2"
                        Data="M 0 0 L 7 7 M 0 7 L 7 0" RenderTransformOrigin="0.5,0.5" >
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleX="0" AngleY="0"/>
                                <RotateTransform Angle="45"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </Border>
            </BulletDecorator.Bullet>

            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Padding" Value="2,0,0,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <MultiDataTrigger>
                <!-- Check for if False_Fill is set -->
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBColorConverter}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBCheckBoxDiamondTemplate -->
    <ControlTemplate x:Key="SBCheckBoxDiamondTemplate" TargetType="{x:Type CheckBox}">
        <BulletDecorator x:Name="PART_SBCheckBoxBulletDecorator" SnapsToDevicePixels="true" Background="Transparent" Margin="2,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Center">

            <BulletDecorator.Bullet>
                <Border x:Name="Border"  
								              Width="13" 
								              Height="13" 
								              CornerRadius="0" 
								              Background="{TemplateBinding Background}"
								              BorderThickness="1"
								              BorderBrush="{TemplateBinding BorderBrush}" RenderTransformOrigin="0.5,0.5" Margin="2,0,0,0">
                    <Border.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                            <SkewTransform AngleX="0" AngleY="0"/>
                            <RotateTransform Angle="45"/>
                            <TranslateTransform X="0" Y="0"/>
                        </TransformGroup>
                    </Border.RenderTransform>
                    <Path 
								                Width="Auto" Height="Auto" 
								                x:Name="Dot"
								                SnapsToDevicePixels="False" 
								                Stroke="{StaticResource SBGlyphBrush}"
								                StrokeThickness="2" Visibility="Hidden"
								                Fill="#FF000000" HorizontalAlignment="Center" Margin="2,2,2,2" VerticalAlignment="Center" >
                        <Path.Data>
                            <PathGeometry>
                                <PathFigure IsClosed="True" StartPoint="24.5,12.5">
                                    <BezierSegment Point1="24.5,19.1274169979695" Point2="19.1274169979695,24.5" Point3="12.5,24.5" IsSmoothJoin="True"/>
                                    <BezierSegment Point1="5.87258300203048,24.5" Point2="0.5,19.1274169979695" Point3="0.5,12.5" IsSmoothJoin="True"/>
                                    <BezierSegment Point1="0.5,5.87258300203048" Point2="5.87258300203048,0.5" Point3="12.5,0.5" IsSmoothJoin="True"/>
                                    <BezierSegment Point1="19.1274169979695,0.5" Point2="24.5,5.87258300203048" Point3="24.5,12.5" IsSmoothJoin="True"/>
                                </PathFigure>
                            </PathGeometry>
                        </Path.Data>
                    </Path>
                </Border>
            </BulletDecorator.Bullet>

            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" RenderTransformOrigin="0.583,0.481"/>
        </BulletDecorator>

        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Padding" Value="2,0,0,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Dot" Property="Visibility" Value="Visible"/>
            </Trigger>
            <MultiDataTrigger>
                <!-- Check for if False_Fill is set -->
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBColorConverter}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBCheckBoxCrossTemplate -->
    <ControlTemplate x:Key="SBCheckBoxCrossTemplate" TargetType="{x:Type CheckBox}">
        <BulletDecorator x:Name="PART_SBCheckBoxBulletDecorator" SnapsToDevicePixels="true" Background="Transparent">

            <BulletDecorator.Bullet>
                <Border x:Name="Border"
                        Width="13" 
                        Height="13" 
                        CornerRadius="0" 
                        Background="{TemplateBinding Background}"
                        BorderThickness="1"
                        BorderBrush="{TemplateBinding BorderBrush}">
                    <Path
                        Width="7" Height="7" 
                        x:Name="CheckMark"
                        SnapsToDevicePixels="False" 
                        Stroke="{StaticResource SBGlyphBrush}"
                        StrokeThickness="2"
                        Visibility="Hidden"
                        Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
            </BulletDecorator.Bullet>

            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Padding" Value="2,0,0,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <MultiDataTrigger>
                <!-- Check for if False_Fill is set -->
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=SBFalseFill, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBColorConverter}}"/>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SBCheckBoxTickTemplate -->
    <ControlTemplate x:Key="SBCheckBoxTickTemplate" TargetType="{x:Type CheckBox}">
        <BulletDecorator x:Name="PART_SBCheckBoxBulletDecorator" SnapsToDevicePixels="true" Background="Transparent">

            <BulletDecorator.Bullet>
                <!-- Bind IsRound to SBCheckBox -->
                <mwt:BulletChrome IsRound="False" x:Name="PART_SBCheckBoxBullet" Background="{TemplateBinding Background}" 
                                  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                  IsChecked="{TemplateBinding IsChecked}" RenderMouseOver="{TemplateBinding IsMouseOver}" 
                                  RenderPressed="{TemplateBinding IsPressed}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  />

            </BulletDecorator.Bullet>

            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
        </BulletDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="true">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Padding" Value="2,0,0,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <MultiDataTrigger>
                <!-- Check for if False_Fill is set -->
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBIsNullOrEmptyConverter}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(rkt:SBGUIAttribute.SBFalseFill), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}, Converter={StaticResource SBColorConverter}}"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="MicrosoftCircle">
                <Setter TargetName="PART_SBCheckBoxBullet" Property="IsRound" Value="True"/>
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- DefaultSBToggleStyle -->
    <Style x:Key="DefaultSBToggleStyle" TargetType="{x:Type CheckBox}" >
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBToggleStyle" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource SBCheckRadioFillNormal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SBCheckRadioStrokeNormal}"/>
        <Setter Property="Content" Value="{Binding Path=Label, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        
        <!-- SBXA-3625 make sure we recognize the SETTATTR editable. -->
        <Setter Property="IsEnabled" Value="{Binding Path=Editable, 
                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                              Mode=TwoWay}"/>
        <Setter Property="TextBox.IsReadOnly" Value="{Binding Path=IsEditable, 
                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                              Mode=TwoWay,
                                                              Converter={StaticResource SBConverter},
                                                              ConverterParameter=reverse}"/>


        <Style.Triggers>
            <!--Trigger Property="IsFocused" Value="True"-->
            <DataTrigger Binding="{Binding Path=IsFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="True">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBToggleFocusContentTemplate" />
                <Setter Property="ContentTemplate" Value="{DynamicResource SBToggleFocusContentTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="Cross">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBCheckBoxCrossTemplate" />
                <Setter Property="Template" Value="{DynamicResource SBCheckBoxCrossTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="Diamond">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBCheckBoxDiamondTemplate" />
                <Setter Property="Template" Value="{DynamicResource SBCheckBoxDiamondTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="MicrosoftCross">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBCheckBoxTickTemplate" />
                <Setter Property="Template" Value="{DynamicResource SBCheckBoxTickTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="MicrosoftCircle">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBCheckBoxTickTemplate" />
                <Setter Property="Template" Value="{DynamicResource SBCheckBoxTickTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=GuiObjectDefinition.ToggleDefinition.ToggleStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBToggle}}}" Value="Tick">
                <Setter Property="rkt:SBUISupport.TemplateName" Value="SBCheckBoxTickTemplate" />
                <Setter Property="Template" Value="{DynamicResource SBCheckBoxTickTemplate}"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!-- DefaultSBPasswordFieldStyle -->
    <Style x:Key="DefaultSBPasswordFieldStyle" TargetType="{x:Type rkt:SBField}" >
        <Setter Property="NoEcho" Value="True" />
    </Style>

    <!-- DefaultSBEditBorderStyle -->
    <Style x:Key="DefaultSBEditBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Border.CornerRadius" Value="1"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSBFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBField}}, Mode=OneWay}" Value="True">
                <Setter Property="BorderThickness" Value="1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- DefaultSBEditTextBoxStyle -->
    <Style x:Key="DefaultSBEditTextBoxStyle"  BasedOn="{StaticResource SBControlStyle}" TargetType="{x:Type rkt:SBTextBox}">
        <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="MaxHeight" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="rkt:SBUISupport.StyleName" Value="SBEditTextBoxStyle" />
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="ToolTip" Value="{Binding Path=ToolTip, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="IsTabStop" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="AutoSelectText" Value="false" />
        <!--<Setter Property="rkt:SBTextBox.CursorPosition" Value="{Binding Path=CursorPosition, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>-->
        <Setter Property="Margin" Value="0"/>
        <!-- SBXA-153 Enabled spell check via a property on the server, which will be set on SBField. -->
        <Setter Property="SpellCheck.IsEnabled" Value="{Binding Path=IsSpellCheckEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="rkt:SBSpellCheck.EnableSpellCheck" Value="{Binding Path=IsSpellCheckEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="TextBox.IsReadOnly" Value="{Binding Path=IsEditable, 
                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                              Mode=TwoWay,
                                                              Converter={StaticResource SBConverter},
                                                              ConverterParameter=reverse}"/>

        <Setter Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBField}}, Mode=OneWay}" />

        <!-- Override field fontsize as we need to fall back to 11 as Vista defaults to
             a larger size that doesn't fit in the textbox -->
        <Setter Property="Control.FontSize">
            <Setter.Value>
                <PriorityBinding FallbackValue="11">
                    <Binding Path="(rkt:SBGUIAttribute.SBFont)" Mode="OneWay" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="GuiObjectDefinition.Font" Mode="OneWay" RelativeSource="{RelativeSource Mode=TemplatedParent}" Converter="{StaticResource SBFontConverter}" ConverterParameter="Size" />
                    <Binding Path="SBPlus.DefaultFontSize" Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}" Converter="{StaticResource SBUnsetValueConverter}" />
                </PriorityBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="Border" 
                            SnapsToDevicePixels="true" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Margin="0,0,0.5,0"
                            >
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Margin="-1,0,0,0"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Style="{DynamicResource SBEditScrollBarStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- DefaultSBEditTextBoxStyle -->
    <!-- Created this style so that the spell checker is only enabled when the field is in focus. eCase 12094*USA (kp Nov 17, 2009) -->
    <Style x:Key="DefaultSBFocusEditTextBoxStyle" BasedOn="{StaticResource DefaultSBEditTextBoxStyle}" TargetType="{x:Type rkt:SBTextBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBFocusEditTextBoxStyle" />
    </Style>

    <!-- DefaultSBEditScrollBarStyle -->
    <Style x:Key="DefaultSBEditScrollBarStyle" TargetType="{x:Type ScrollViewer}"/>

    <Style x:Key="HiddenSlashComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter 
            Property="Visibility" 
            Value="{Binding 
                        Path=Content, 
                        RelativeSource={RelativeSource Mode=Self}, 
                        Converter={StaticResource SBSlashComboBoxItemConverter}}" />
    </Style>

    <!-- DefaultSBComboBoxControlStyle -->
    <Style x:Key="DefaultSBComboBoxControlStyle" BasedOn="{StaticResource SBControlStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBComboBoxControlStyle" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource HiddenSlashComboBoxItemStyle}" />
        <Setter Property="ItemsSource" Value="{Binding Path=ItemsSource, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="SelectedValuePath" Value="Value" />
        <Setter Property="TabIndex" Value="{Binding Path=TabIndex, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="IsEnabled" 
                Value="{Binding Path=IsEditable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type rkt:SBComboBox}}}" />
        <Setter Property="SelectedItem">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource SBComboBoxValueConverter}" Mode="TwoWay">
                    <Binding Path="GuiObjectDefinition.ComboBoxDefinition" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="OneWay" />
                    <Binding Path="SBListItems" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="OneWay" />
                    <Binding Path="SBValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="TwoWay" />
                    <Binding Path="SelectedValuePath" RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay" />
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="BorderBrush" Value="#FF929393" />
        <Setter Property="Height" Value="20" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="BitmapEffect">
            <Setter.Value>
                <DropShadowBitmapEffect Opacity="0.4" ShadowDepth="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.394,-0.2" StartPoint="0.394,1.1">
                    <GradientStop Color="#FFD5D5D5" Offset="1"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- DefaultSBFocusComboBoxControlStyle -->
    <Style x:Key="DefaultSBFocusComboBoxControlStyle" BasedOn="{StaticResource DefaultSBComboBoxControlStyle}" TargetType="{x:Type ComboBox}" />


    <!-- DefaultSBAutoCompleteComboBoxControlStyle -->
    <Style x:Key="DefaultSBAutoCompleteComboBoxControlStyle" BasedOn="{StaticResource DefaultSBComboBoxControlStyle}" TargetType="{x:Type rkt:AutoCompleteComboBox}">
        <Setter Property="rkt:SBUISupport.StyleName" Value="DefaultSBAutoCompleteComboBoxControlStyle" />

        <!-- currently we are setting this in code to fix a problem with AutoComplete in a grid -->
        <Setter Property="ItemContainerStyle" Value="{x:Null}" />
        <!-- currently we are setting this in code to fix a problem with AutoComplete in a grid -->
        <Setter Property="ItemsSource" Value="{x:Null}" />
        <Setter Property="StaysOpenOnEdit" Value="True" />
        <Setter Property="IsTextSearchEnabled" Value="False" />
        <Setter Property="SelectedItem">
            <!-- Use OneWay binding, as AutoCompleteComboBox currently handles the binding from SelectedItem to SBComboBox.SBValue internally -->
            <Setter.Value>
                <MultiBinding Converter="{StaticResource SBComboBoxValueConverter}" Mode="OneWay">
                    <Binding Path="GuiObjectDefinition.ComboBoxDefinition" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="OneWay" />
                    <Binding Path="SBListItems" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="OneWay" />
                    <Binding Path="SBValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" Mode="TwoWay" />
                    <Binding Path="SelectedValuePath" RelativeSource="{RelativeSource Mode=Self}" Mode="OneWay" />
                </MultiBinding>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- DefaultSBFocusAutoCompleteComboBoxControlStyle -->
    <Style x:Key="DefaultSBFocusAutoCompleteComboBoxControlStyle" BasedOn="{StaticResource DefaultSBAutoCompleteComboBoxControlStyle}" TargetType="{x:Type rkt:AutoCompleteComboBox}" />

    
</ResourceDictionary>